<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一切都是对象]]></title>
    <url>%2Fthink-java-obj%2F</url>
    <content type="text"><![CDATA[预备知识存放在哪1）寄存器。这是最快的存储区，因为它位于不同于其它存储区的地方——处理器内部。但是寄存器的数量极其有限，所以寄存器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。2）堆栈。位于通用RAM(随机访问存储器)中，但通过堆栈指针可以从处理器哪里获取直接支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时，Java系统必须知道存储器在堆栈内所有项的确切生命周期，以便上下移动堆栈指针。这一约束限制了程序的灵活性，所以虽然某些Java数据存储于堆栈中——特别是对象的引用，但是Java对象并不存储于其中。3）堆。一种通用的内存池（也位于RAM区），用于存放所有的Java对象。堆不同于堆栈的好处是：编译器不需要知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当需要一个对象时，只需要new写一行简单的代码，当执行这行代码时，会自动在堆里进行存储分配。当然，这种灵活性必须要付出相应的代价：用堆进行存储分配和清理可能比用堆栈进行存储和分配需要更多的时间。4）常量存储。常量值通常放在程序代码内部，这样做是安全的，因为它永远不会被改变。有时，在嵌入式系统中，常量本身会和其它部分分隔离开，所以在这种该情况下，可以选择将他存放在ROM（只读存储器中）。5）非RAM存储。如果数据完全存活于程序之外，那么它可以不接受程序的任何控制，在程序没有运行时也可以存在，其中两个基本的例子是流对象和持久化对象。在流对象中，对象转化成字节流，通常被发送给另一台机器。在“持久化对象中”，对象被存放在磁盘上，因此，即使程序终止，它们仍可以保持自己的状态。这种存储方式的技巧在于：把对象转化成可以存放在其它媒介上的事务，在需要时，可以恢复成常规的、基于RAM的对象。Java提供了轻量级持久化的支持，而诸如JDBC和Hibernate这样的机制提供了更加复杂的对在数据库中存储和读取对象信息的支持。 特例：基本类型在程序设计中经常用到一系列类型，他们需要特殊对待。可以把他们想象成“基本”类型。之所以特殊对待，是因为new将对象存储在堆里，故用new创建一个对象——特别是小的、简单的变量，往往不是很有效。因此，对于这些类型，Java采用和C与C++相同的方法。也就是说不用new来创建变量，而是创建一个并非是引用的“自动”变量。这个变量直接存储“值”，并置于堆栈中，因此效率更高。]]></content>
      <categories>
        <category>JAVA</category>
        <category>ThinkJava</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法简介]]></title>
    <url>%2Fmarkdown-noon%2F</url>
    <content type="text"><![CDATA[标题123# 一级标题## 二级标题### 三级标题 字体加粗1** 需要加粗的文字 ** 斜体1* 需要斜体的文字 * 斜体加粗1*** 需要斜体加粗的文字 *** 删除线1~~ 需要加删除线的文字 ~~ 引用 引用内容1&gt; 被引用的内容 分割线 1三个 *** 图片12格式： ![alt](URL)如当前图片案例： ![picture](https://s1.ax1x.com/2018/08/06/PrugHA.jpg) 超链接博客地址12格式： [锚点文字](URL)如当前超链接案例：[博客地址](http://iamhz.coding.me/) 列表 列表内容 列表内容 有序列表内容 有序列表内容 有序列表内容 123456* + 空格 + 描述内容 （无序）* 行1数字 + . + 空格 + 描述内容 （有序）1. 列表内容2. 列表内容3. 列表内容 列表嵌套 一级列表 二级列表 三级列表 一级有序列表 二级有序列表 三级有序列表 1234567层级之前相隔三个空格* 一级列表 * 二级列表 * 三级列表1. 一级有序列表 2. 二级有序列表 3. 三级有序列表 表格 姓名 年龄 性别 小明 5 男 小红 6 女 12345格式：表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 代码块12345var answer = &apos;牛逼的代码&apos;;function prinit()&#123; console.log(answer); &#125;prinit();]]></content>
      <categories>
        <category>前端</category>
        <category>markdown</category>
      </categories>
  </entry>
</search>
